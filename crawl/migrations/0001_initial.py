# Generated by Django 3.2 on 2025-01-31 14:06

import datetime
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(null=True, unique=True)),
                ('name', models.CharField(max_length=500)),
                ('serial_number', models.CharField(max_length=500)),
                ('info', models.JSONField(blank=True, null=True)),
                ('is_connected', models.BooleanField(default=False)),
                ('is_running', models.BooleanField(default=False)),
                ('rest_period_between_same_service_tasks', models.FloatField(default=0.5, help_text='Enter Rest Period between Intra Service tasks in hours')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=20, unique=True)),
                ('current_state', models.CharField(max_length=20)),
                ('disconnected_since', models.DateTimeField(blank=True, null=True)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok'), ('facebook', 'facebook'), ('cleaner', 'cleaner'), ('reports_manager', 'reports_manager'), ('data_enricher', 'Data Enricher'), ('openai', 'OpenAI'), ('audience', 'Audience'), ('datahouse', 'DataHouse')], max_length=20)),
                ('total_active_hours', models.IntegerField()),
                ('average_task_duration', models.IntegerField()),
                ('total_tasks_run', models.IntegerField()),
                ('last_usage_datetime', models.DateTimeField()),
                ('last_report_time', models.DateTimeField()),
                ('last_used_by_task', models.CharField(max_length=50)),
                ('add_info', models.TextField()),
                ('accounts', models.IntegerField()),
                ('failed_tasks_in_last_6hrs', models.IntegerField()),
                ('successful_tasks_in_last_30hrs', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot_username', models.CharField(max_length=500, null=True, verbose_name='bot_username')),
                ('ref_id', models.IntegerField(blank=True, null=True, verbose_name='Automation Task Id')),
                ('activity', models.CharField(choices=[('dm', 'DM'), ('follow', 'Follow'), ('like', 'Like')], max_length=500)),
                ('dm_type', models.CharField(blank=True, choices=[('reachout', 'Reach Out'), ('welcome', 'Welcome')], max_length=100, null=True)),
                ('interaction_time', models.DateTimeField(default=datetime.datetime(2025, 1, 31, 19, 6, 23, 620531), null=True)),
                ('target_profile', models.CharField(blank=True, max_length=100, null=True)),
                ('target_post', models.CharField(blank=True, max_length=500, null=True)),
                ('data', models.JSONField(blank=True, max_length=1000, null=True)),
                ('screenshot', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('entry_id', models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Output',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=1000, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('reported_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Proxy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(null=True, unique=True)),
                ('max_threads', models.IntegerField(default=1)),
                ('proxy_url', models.CharField(blank=True, max_length=500, null=True)),
                ('ua_string', models.CharField(max_length=5000, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('proxy_blacklisted', models.BooleanField(default=False)),
                ('provider', models.CharField(blank=True, max_length=1000, null=True)),
                ('tagged_bad_on', models.DateTimeField(blank=True, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('proxy_type', models.CharField(choices=[('static_proxy', 'Static Proxy'), ('rotating_proxy', 'Rotating Proxy')], default='static_proxy', max_length=20)),
                ('proxy_protocol', models.CharField(choices=[('http', 'Http'), ('socks', 'Socks'), ('http_socks', 'Both')], default='http', max_length=20)),
                ('name', models.CharField(blank=True, max_length=5000, null=True, unique=True)),
            ],
            options={
                'verbose_name_plural': 'proxies',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=500, null=True)),
                ('uuid', models.CharField(default='8dc70907-dfdc-11ef-9468-047c1611323a', max_length=50000, unique=True)),
                ('ref_id', models.CharField(default=models.CharField(default='8dc70907-dfdc-11ef-9468-047c1611323a', max_length=50000, unique=True), max_length=5000)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok'), ('facebook', 'facebook'), ('cleaner', 'cleaner'), ('reports_manager', 'reports_manager'), ('data_enricher', 'Data Enricher'), ('openai', 'OpenAI'), ('audience', 'Audience'), ('datahouse', 'DataHouse')], db_index=True, default='instagram', max_length=50)),
                ('interact', models.BooleanField(default=False)),
                ('os', models.CharField(choices=[('android', 'android'), ('browser', 'browser')], max_length=500)),
                ('data_point', models.CharField(blank=True, max_length=500, null=True)),
                ('end_point', models.CharField(blank=True, max_length=500, null=True)),
                ('input', models.CharField(blank=True, max_length=500, null=True)),
                ('condition', models.CharField(blank=True, max_length=500, null=True)),
                ('profile', models.TextField(blank=True, null=True)),
                ('alloted_bots', models.TextField(blank=True, null=True)),
                ('device', models.TextField(blank=True, null=True)),
                ('targets', models.TextField(blank=True, null=True)),
                ('add_data', models.JSONField(blank=True, null=True)),
                ('repeat', models.BooleanField(default=False)),
                ('repeat_duration', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('running', 'running'), ('failed', 'failed'), ('completed', 'completed')], default='pending', max_length=100)),
                ('last_state_changed_at', models.FloatField(blank=True, null=True)),
                ('report', models.BooleanField(default=False)),
                ('retries_count', models.IntegerField(default=0)),
                ('paused', models.BooleanField(default=False)),
                ('dependent_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dependents', to='crawl.task')),
            ],
        ),
        migrations.CreateModel(
            name='RequestRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=datetime.datetime(2025, 1, 31, 19, 6, 23, 626162))),
                ('request_record_type', models.CharField(max_length=255)),
                ('service', models.CharField(max_length=255)),
                ('end_point', models.CharField(max_length=255)),
                ('data_point', models.CharField(max_length=255)),
                ('url', models.URLField(blank=True, null=True)),
                ('r_type', models.CharField(max_length=255)),
                ('bot_username', models.CharField(max_length=255)),
                ('ip_address', models.CharField(blank=True, max_length=500, null=True)),
                ('proxy', models.CharField(blank=True, max_length=500, null=True)),
                ('logged_in', models.BooleanField(default=False)),
                ('params', models.JSONField(blank=True, default={})),
                ('payload', models.JSONField(blank=True, default={})),
                ('status_code', models.IntegerField(default=200)),
                ('data', models.JSONField(blank=True, default={})),
                ('error', models.JSONField(blank=True, default={})),
                ('request_made', models.IntegerField(blank=True, null=True)),
                ('rate_limited', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crawl.task')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outputs', models.ManyToManyField(to='crawl.Output')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='report_for', to='crawl.task')),
            ],
        ),
        migrations.CreateModel(
            name='ChildBot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(null=True, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=100, null=True)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok'), ('facebook', 'facebook'), ('cleaner', 'cleaner'), ('reports_manager', 'reports_manager'), ('data_enricher', 'Data Enricher'), ('openai', 'OpenAI'), ('audience', 'Audience'), ('datahouse', 'DataHouse')], db_index=True, default='instagram', max_length=50)),
                ('username', models.CharField(db_index=True, max_length=50)),
                ('password', models.CharField(max_length=50)),
                ('phone_number', models.PositiveIntegerField(blank=True, null=True)),
                ('proxy_url', models.CharField(blank=True, max_length=500, null=True)),
                ('email_address', models.EmailField(blank=True, db_index=True, max_length=254, null=True)),
                ('email_password', models.CharField(blank=True, max_length=100, null=True)),
                ('auth_code', models.CharField(blank=True, max_length=500, null=True)),
                ('recovery_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('imap_email_host', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_username', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_password', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_port', models.CharField(blank=True, max_length=6, null=True)),
                ('is_challenged', models.BooleanField(default=False)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='crawl.device')),
            ],
        ),
    ]
